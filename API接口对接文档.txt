===============================================
        面试系统API接口对接文档
===============================================

项目名称：AI智能面试系统
前端地址：http://localhost:3000
后端地址：http://localhost:8000
Mock服务地址：http://localhost:3001
文档版本：v2.1
更新时间：2024-12-19

===============================================
           目录
===============================================
1. 接口概述
2. 认证机制
3. 用户认证接口
4. 简历分析接口
5. 面试相关接口
6. 管理员接口
7. 系统状态接口
8. 错误处理
9. 数据格式说明
10. Mock服务说明
11. 接口测试示例
12. 常见问题FAQ
13. 前后端联调指南

===============================================
           1. 接口概述
===============================================

本系统采用RESTful API设计，所有接口返回JSON格式数据。
- 基础URL：http://localhost:8000
- 内容类型：application/json
- 认证方式：Bearer Token
- 字符编码：UTF-8

===============================================
           2. 认证机制
===============================================

除了登录和注册接口外，所有接口都需要在请求头中携带token：

Headers:
Authorization: Bearer {token}
Content-Type: application/json

token获取方式：
- 用户登录成功后，服务器返回token
- 前端需将token存储在localStorage中
- 每次请求时自动在请求头中添加

token失效处理：
- 当接口返回401状态码时，表示token失效
- 前端需清除本地token并重定向到登录页面

管理员权限识别：
- 管理员权限完全由后端预设，前端无法注册或申请管理员权限
- 预设管理员账号：用户名为"admin"或"manager"的用户自动拥有管理员权限
- 当管理员用户登录/注册时，接口返回message字段为"manager"
- 前端收到"manager"消息后，自动跳转到管理员界面(/admin)
- 普通用户无论如何都无法获得管理员权限，只能由后端系统预设

===============================================
           3. 用户认证接口
===============================================

3.1 用户登录
-----------
接口：POST /login
描述：用户登录验证

请求参数：
{
  "username": "string",  // 用户名（必填）
  "password": "string"   // 密码（必填）
}

成功响应（普通用户）：
{
  "message": "success",
  "token": "string",     // JWT token
  "user": {
    "id": "string",
    "username": "string",
    "email": "string",
    "created_at": "string"
  }
}

成功响应（管理员用户）：
{
  "message": "manager",  // 管理员标识
  "token": "string",     // JWT token
  "user": {
    "id": "string",
    "username": "string",
    "email": "string",
    "role": "manager",
    "created_at": "string"
  }
}

失败响应：
{
  "message": "string",   // 错误信息
  "error_code": "string" // 错误代码（可选）
}

可能的错误：
- 400: 参数缺失或格式错误
- 401: 用户名或密码错误
- 500: 服务器内部错误

3.2 用户注册
-----------
接口：POST /register
描述：新用户注册

请求参数：
{
  "username": "string",  // 用户名（必填，3-20字符）
  "email": "string",     // 邮箱地址（必填，有效邮箱格式）
  "password": "string"   // 密码（必填，6-20字符）
}

管理员账号说明：
- 预设管理员用户名：
  * "admin" - 系统管理员
  * "manager" - 管理员
- 当用户注册/登录时使用以上用户名，系统自动赋予管理员权限
- 管理员权限完全由后端控制，前端无任何管理员注册功能
- 成功注册/登录管理员账号后，返回message为"manager"，前端自动跳转至管理员界面

示例：
- 注册用户名"admin"：自动获得管理员权限
- 注册用户名"user123"：普通用户权限
- 登录用户名"manager"：自动获得管理员权限

成功响应（普通用户）：
{
  "message": "success",
  "token": "string",     // JWT token
  "user": {
    "id": "string",
    "username": "string",
    "email": "string",
    "created_at": "string"
  }
}

成功响应（管理员用户）：
{
  "message": "manager",  // 管理员标识
  "token": "string",     // JWT token
  "user": {
    "id": "string",
    "username": "string",
    "email": "string",
    "role": "manager",
    "created_at": "string"
  }
}

失败响应：
{
  "message": "string",   // 错误信息
  "error_code": "string" // 错误代码（可选）
}

可能的错误：
- 400: 参数格式错误
- 409: 用户名或邮箱已存在
- 500: 服务器内部错误

===============================================
           4. 简历分析接口
===============================================

4.1 简历分析
-----------
接口：POST /analyze-resume
描述：上传PDF简历进行智能分析（新增分析方向参数）
认证：需要Bearer Token

请求格式：multipart/form-data
参数：
- resume: File (PDF文件，最大10MB)
- direction: string (分析方向，必填)

分析方向示例：
- "前端工程师"
- "Java工程师"
- "产品经理"
- "数据分析师"
- "AI工程师"
等...

成功响应：
{
  "message": "success",
  "analysis": {
    "basic_info": {
      "name": "string",          // 姓名
      "phone": "string",         // 电话
      "email": "string",         // 邮箱
      "education": "string",     // 教育背景
      "experience_years": "string" // 工作年限
    },
    "skills": [                  // 技能列表
      "JavaScript",
      "Python",
      "React"
    ],
    "strengths": [               // 优势分析
      "技术基础扎实",
      "项目经验丰富"
    ],
    "suggestions": [             // 改进建议
      "可以加强算法学习",
      "建议增加项目经验"
    ],
    "recommended_positions": [   // 推荐职位
      "前端开发工程师",
      "全栈开发工程师"
    ],
    "overall_score": 85,         // 总体评分(0-100)
    "direction_match": 92        // 与目标方向匹配度(0-100)
  }
}

失败响应：
{
  "message": "string",   // 错误信息
  "error_code": "string"
}

可能的错误：
- 400: 文件格式不支持、文件过大或分析方向缺失
- 401: 未授权访问
- 413: 文件大小超出限制
- 500: 分析处理失败

===============================================
           5. 面试相关接口
===============================================

5.1 创建面试会话
--------------
接口：POST /api/interview/create
描述：创建面试会话，设置面试方向
认证：需要Bearer Token

请求参数：
{
  "directions": [        // 面试方向列表（必填）
    "frontend_engineer", // 前端工程师
    "backend_engineer"   // 后端工程师
  ]
}

面试方向选项：
- "ai_engineer": AI工程师
- "data_engineer": 数据工程师
- "frontend_engineer": 前端工程师
- "backend_engineer": 后端工程师
- "devops_engineer": DevOps工程师
- "product_manager": 产品经理
- "qa_engineer": 测试工程师

成功响应：
{
  "message": "success",
  "sessionId": "string"      // 面试会话ID（重要，后续请求需要）
}

失败响应：
{
  "message": "string",
  "error_code": "string"
}

可能的错误：
- 400: 面试方向参数错误
- 401: 未授权访问
- 500: 服务器处理失败

5.2 开始面试
-----------
接口：POST /api/interview/start
描述：正式开始面试
认证：需要Bearer Token

请求参数：
{} // 空对象，依赖token识别用户

成功响应：
{
  "message": "success",
  "sessionId": "string"      // 面试会话ID
}

失败响应：
{
  "message": "string",
  "error_code": "string"
}

可能的错误：
- 401: 未授权访问
- 404: 面试会话不存在
- 500: 服务器处理失败

5.3 获取面试问题
--------------
接口：GET /api/interview/question
描述：获取当前面试问题
认证：需要Bearer Token

请求参数：无（依赖token识别用户和会话）

成功响应：
{
  "message": "success",
  "question": "string",      // 面试问题
  "questionIndex": 0,        // 问题索引（从0开始）
  "isEnd": false            // 是否为最后一个问题
}

面试结束响应：
{
  "message": "success",
  "isEnd": true,            // 面试结束标识
  "question": null
}

失败响应：
{
  "message": "string",
  "error_code": "string"
}

可能的错误：
- 401: 未授权访问
- 404: 面试会话不存在
- 500: 服务器处理失败

5.4 提交面试回答
--------------
接口：POST /api/interview/question
描述：提交面试回答
认证：需要Bearer Token

请求格式：multipart/form-data
参数：
- transcription: string    // 语音转文字内容（必填）
- video: File             // 录像文件（webm格式，可选）
- questionIndex: string   // 当前问题索引（必填）

成功响应：
{
  "message": "success"
}

失败响应：
{
  "message": "string",
  "error_code": "string"
}

可能的错误：
- 400: 参数错误或格式不支持
- 401: 未授权访问
- 404: 面试会话不存在
- 413: 视频文件过大
- 500: 服务器处理失败

面试流程说明：
1. 调用 POST /api/interview/create 创建面试会话
2. 调用 POST /api/interview/start 开始面试
3. 重复执行以下步骤直到面试结束：
   a. 调用 GET /api/interview/question 获取问题
   b. 用户回答问题
   c. 调用 POST /api/interview/question 提交回答
4. 当获取问题时返回 isEnd: true 表示面试结束

5.5 获取面试总结
--------------
接口：GET /interview/summary/{sessionId}
描述：获取面试完成后的总结报告
认证：需要Bearer Token

请求参数：
- sessionId: string (URL路径参数)

成功响应：
{
  "message": "success",
  "summary": {
    "overall_score": 85,              // 总体评分
    "technical_assessment": {         // 技术评估
      "score": 88,
      "feedback": "技术基础扎实..."
    },
    "communication_assessment": {     // 沟通评估
      "score": 82,
      "feedback": "表达清晰..."
    },
    "strengths": [                    // 优势
      "技术基础扎实",
      "逻辑思维清晰"
    ],
    "areas_for_improvement": [        // 改进建议
      "可以更详细地阐述技术细节",
      "增加项目经验分享"
    ],
    "recommendations": [              // 建议
      "深入学习算法",
      "参与开源项目"
    ],
    "detailed_feedback": "string",    // 详细反馈
    "interview_duration": "25分钟",   // 面试时长
    "questions_answered": 5           // 回答问题数
  }
}

失败响应：
{
  "message": "string",
  "error_code": "string"
}

===============================================
           6. 管理员接口
===============================================

6.1 用户管理
-----------
接口：GET /admin/users
描述：获取用户列表（仅管理员可访问）
认证：需要管理员Bearer Token

成功响应：
{
  "message": "success",
  "users": [
    {
      "id": "string",
      "username": "string",
      "email": "string",
      "interviews_count": 5,
      "last_login": "2024-01-15",
      "created_at": "2024-01-01"
    }
  ],
  "total": 100
}

6.2 面试统计
-----------
接口：GET /admin/stats
描述：获取面试数据统计（仅管理员可访问）
认证：需要管理员Bearer Token

成功响应：
{
  "message": "success",
  "stats": {
    "total_users": 150,
    "total_interviews": 320,
    "avg_score": 78.5,
    "popular_directions": [
      "前端工程师",
      "Java工程师",
      "产品经理"
    ]
  }
}

===============================================
           7. 系统状态接口
===============================================

7.1 健康检查
-----------
接口：GET /health
描述：检查服务器运行状态

成功响应：
{
  "status": "ok",
  "timestamp": "2024-01-01T12:00:00Z",
  "version": "1.0.0"
}

===============================================
           8. 错误处理
===============================================

标准错误响应格式：
{
  "message": "string",       // 错误描述
  "error_code": "string",    // 错误代码（可选）
  "timestamp": "string"      // 错误时间戳（可选）
}

HTTP状态码说明：
- 200: 请求成功
- 400: 请求参数错误
- 401: 未授权（token失效或缺失）
- 403: 权限不足（如非管理员访问管理员接口）
- 404: 资源不存在
- 409: 资源冲突（如用户名已存在）
- 413: 请求实体过大（文件大小超限）
- 500: 服务器内部错误

===============================================
           9. 数据格式说明
===============================================

9.1 时间格式
所有时间字段使用ISO 8601格式：
"2024-01-01T12:00:00Z"

9.2 文件上传限制
- PDF文件：最大10MB
- 视频文件：最大50MB，支持webm格式

9.3 字符串长度限制
- 用户名：3-20字符
- 密码：6-20字符
- 面试回答：最大10000字符

===============================================
           10. Mock服务说明
===============================================

10.1 Mock服务器配置
-----------------
项目提供了Mock服务器用于前端开发和测试：

启动Mock服务：
1. 进入mocks目录
2. 执行：npm install
3. 启动：npm start 或 node server.js
4. 访问：http://localhost:3001

Mock接口映射：
- POST /login → 模拟登录
- POST /register → 模拟注册
- POST /analyze-resume → 模拟简历分析
- 所有面试相关接口的模拟实现

10.2 Mock数据说明
---------------
Mock服务提供以下测试账号：

管理员账号：
- 用户名：admin / manager
- 密码：任意（Mock环境）
- 返回：manager权限

普通用户：
- 用户名：其他任意用户名
- 密码：任意（Mock环境）
- 返回：普通用户权限

===============================================
           11. 接口测试示例
===============================================

11.1 用户登录测试
-----------------
curl示例：
```bash
curl -X POST http://localhost:8000/login \
  -H "Content-Type: application/json" \
  -d '{
    "username": "admin",
    "password": "123456"
  }'
```

JavaScript示例：
```javascript
const response = await fetch('http://localhost:8000/login', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json'
  },
  body: JSON.stringify({
    username: 'admin',
    password: '123456'
  })
});
const data = await response.json();
console.log(data);
```

11.2 简历分析测试
-----------------
curl示例：
```bash
curl -X POST http://localhost:8000/analyze-resume \
  -H "Authorization: Bearer YOUR_TOKEN" \
  -F "resume=@resume.pdf" \
  -F "direction=前端工程师"
```

JavaScript示例：
```javascript
const formData = new FormData();
formData.append('resume', pdfFile);
formData.append('direction', '前端工程师');

const response = await fetch('http://localhost:8000/analyze-resume', {
  method: 'POST',
  headers: {
    'Authorization': 'Bearer ' + token
  },
  body: formData
});
```

11.3 完整面试流程测试
-------------------
```javascript
// 1. 创建面试会话
const createResult = await fetch('/api/interview/create', {
  method: 'POST',
  headers: {
    'Authorization': 'Bearer ' + token,
    'Content-Type': 'application/json'
  },
  body: JSON.stringify({
    directions: ['frontend_engineer', 'backend_engineer']
  })
});

// 2. 开始面试
const startResult = await fetch('/api/interview/start', {
  method: 'POST',
  headers: {
    'Authorization': 'Bearer ' + token,
    'Content-Type': 'application/json'
  },
  body: JSON.stringify({})
});

// 3. 获取问题
const questionResult = await fetch('/api/interview/question', {
  method: 'GET',
  headers: {
    'Authorization': 'Bearer ' + token
  }
});

// 4. 提交答案
const formData = new FormData();
formData.append('transcription', '我的回答内容');
formData.append('video', videoBlob);
formData.append('questionIndex', '0');

const submitResult = await fetch('/api/interview/question', {
  method: 'POST',
  headers: {
    'Authorization': 'Bearer ' + token
  },
  body: formData
});
```

===============================================
           12. 常见问题FAQ
===============================================

12.1 认证相关问题
-----------------
Q: Token过期后如何处理？
A: 后端返回401状态码时，前端需要：
   1. 清除本地存储的token
   2. 重定向到登录页面
   3. 提示用户重新登录

Q: 如何判断用户是否为管理员？
A: 登录/注册成功后，检查返回的message字段：
   - "success": 普通用户
   - "manager": 管理员用户

12.2 文件上传问题
-----------------
Q: 支持哪些文件格式？
A: 
   - 简历：仅支持PDF格式，最大10MB
   - 视频：支持webm格式，最大50MB

Q: 文件上传失败如何处理？
A: 检查以下几点：
   1. 文件格式是否正确
   2. 文件大小是否超限
   3. 网络连接是否正常
   4. Token是否有效

12.3 面试流程问题
-----------------
Q: 面试可以中途退出吗？
A: 可以，但已回答的问题会被保存，无法恢复到中断状态

Q: 面试问题是动态生成的吗？
A: 是的，问题根据选择的面试方向动态生成

Q: 视频录制失败怎么办？
A: 系统会自动降级到仅文字模式，不影响面试进行

12.4 开发调试问题
-----------------
Q: 如何在本地开发环境测试？
A: 
   1. 使用Mock服务器进行前端开发
   2. 配置代理转发到实际后端
   3. 使用浏览器开发者工具检查网络请求

Q: CORS错误如何解决？
A: 后端需要配置CORS，允许前端域名：
   ```
   Access-Control-Allow-Origin: http://localhost:3000
   Access-Control-Allow-Methods: GET, POST, PUT, DELETE
   Access-Control-Allow-Headers: Authorization, Content-Type
   ```

===============================================
           13. 前后端联调指南
===============================================

13.1 联调准备
-----------
前端准备：
1. 确保API基础URL配置正确
2. 检查Token管理逻辑
3. 验证请求头设置
4. 准备测试数据

后端准备：
1. 启动开发服务器
2. 配置CORS策略
3. 准备数据库测试数据
4. 开启请求日志

13.2 联调步骤
-----------
1. 基础连接测试
   - 测试健康检查接口 GET /health
   - 验证CORS配置是否正确

2. 用户认证联调
   - 测试用户注册接口
   - 测试用户登录接口
   - 验证Token生成和验证

3. 业务功能联调
   - 测试简历分析功能
   - 测试面试流程完整链路
   - 测试管理员功能

4. 异常场景测试
   - 测试Token过期处理
   - 测试网络异常处理
   - 测试文件上传限制

13.3 联调工具推荐
-----------------
1. 网络调试：
   - Chrome DevTools
   - Postman
   - Insomnia

2. 日志监控：
   - 前端：console.log
   - 后端：服务器访问日志

3. 数据对比：
   - JSON格式化工具
   - Diff工具对比请求响应

13.4 常见联调问题
-----------------
1. 接口404错误
   - 检查URL路径是否正确
   - 确认后端路由是否注册

2. 参数格式错误
   - 对比API文档检查参数格式
   - 验证Content-Type设置

3. 权限验证失败
   - 检查Token是否正确传递
   - 验证Token格式和有效期

===============================================
           版本更新记录
===============================================

v2.1 (2024-12-19):
- 新增Mock服务说明
- 添加详细的接口测试示例
- 增加常见问题FAQ
- 补充前后端联调指南
- 完善错误处理说明
- 优化文档结构和可读性

v2.0 (2024-12-18):
- 新增管理员功能和相关接口
- 简历分析增加方向参数
- 面试开始流程改为两步式（create + start）
- 面试问题处理改为独立的GET/POST接口
- 更新认证机制支持管理员权限识别

v1.0 (2024-12-17):
- 初始版本
- 基础用户认证功能
- 简历分析功能
- 面试功能
- 系统状态接口

===============================================
           14. 开发调试说明
===============================================

14.1 本地开发环境配置
-------------------
服务端口分配：
- 前端开发服务器：http://localhost:3000
- 后端API服务器：http://localhost:8000
- Mock服务器：http://localhost:3001

启动顺序建议：
1. 先启动Mock服务器（如使用Mock数据）
2. 启动后端服务器
3. 最后启动前端开发服务器

14.2 API测试工具配置
------------------
推荐工具：
1. Postman Collection
   - 导入项目提供的Postman配置文件
   - 配置环境变量（base_url, token等）

2. VS Code REST Client
   - 使用.http文件进行接口测试
   - 支持变量和脚本

3. curl命令行
   - 适合自动化测试脚本
   - 便于CI/CD集成

14.3 日志记录配置
-----------------
前端日志：
- API请求/响应自动记录
- 错误堆栈信息记录
- 用户操作行为记录

后端日志建议：
- 请求响应时间
- SQL查询日志
- 错误异常栈信息
- 用户操作审计日志

14.4 跨域配置详解
-----------------
后端CORS配置示例：
```javascript
// Express.js示例
app.use(cors({
  origin: ['http://localhost:3000', 'http://localhost:3001'],
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE'],
  allowedHeaders: ['Content-Type', 'Authorization']
}));
```

前端代理配置（如果需要）：
```json
// package.json
{
  "proxy": "http://localhost:8000"
}
```

14.5 环境切换配置
-----------------
前端环境配置：
```javascript
// config.js
const config = {
  development: {
    API_BASE_URL: 'http://localhost:8000',
    USE_MOCK: false
  },
  production: {
    API_BASE_URL: 'https://api.interview-system.com',
    USE_MOCK: false
  },
  mock: {
    API_BASE_URL: 'http://localhost:3001',
    USE_MOCK: true
  }
};
```

===============================================
           15. 注意事项与最佳实践
===============================================

15.1 安全性要求
--------------
1. 身份验证：
   - 所有业务接口必须验证Bearer Token
   - Token过期时间建议设置为24小时
   - 实现Token刷新机制

2. 数据验证：
   - 服务端必须验证所有输入参数
   - 文件上传严格检查类型和大小
   - 防止SQL注入、XSS、CSRF攻击

3. 权限控制：
   - 管理员接口必须验证用户角色
   - 用户只能访问自己的数据
   - 敏感操作记录审计日志

15.2 性能优化建议
-----------------
1. 文件处理：
   - 大文件使用分块上传
   - 视频文件考虑服务端压缩
   - 实现断点续传功能

2. 接口响应：
   - API响应时间控制在3秒内
   - 长时间操作使用异步处理
   - 实现请求重试机制

3. 缓存策略：
   - 静态数据使用Redis缓存
   - 频繁查询的数据添加缓存
   - 设置合理的缓存过期时间

15.3 用户体验优化
-----------------
1. 交互反馈：
   - 所有异步操作显示加载状态
   - 错误信息要清晰友好
   - 成功操作给予明确提示

2. 网络处理：
   - 网络错误自动重试
   - 离线状态友好提示
   - 弱网环境优化

3. 数据保护：
   - 表单数据本地临时保存
   - 面试过程防止意外中断
   - 关键操作二次确认

15.4 数据管理规范
-----------------
1. 数据备份：
   - 用户数据每日备份
   - 面试录像保存30天
   - 分析结果长期保存

2. 数据清理：
   - 定期清理过期Token
   - 删除无效的临时文件
   - 归档历史面试数据

3. 数据监控：
   - 监控API调用频率
   - 跟踪异常请求模式
   - 统计系统使用情况

===============================================
           16. 部署配置说明
===============================================

16.1 生产环境配置
-----------------
后端配置：
- 数据库连接池配置
- Redis缓存配置
- 文件存储服务配置（如OSS）
- HTTPS证书配置

前端配置：
- 生产环境API地址
- CDN资源配置
- 错误监控配置
- 性能监控配置

16.2 容器化部署
--------------
Docker配置示例：
```dockerfile
# 前端Dockerfile
FROM node:16-alpine
WORKDIR /app
COPY package*.json ./
RUN npm install
COPY . .
RUN npm run build
EXPOSE 3000
CMD ["npm", "start"]
```

Docker Compose配置：
```yaml
version: '3.8'
services:
  frontend:
    build: ./frontend
    ports:
      - "3000:3000"
  backend:
    build: ./backend
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://...
```

16.3 监控与日志
--------------
建议监控指标：
- API响应时间
- 错误率
- 并发用户数
- 文件上传成功率

日志收集：
- 应用日志集中收集
- 错误日志实时告警
- 性能指标定期分析

===============================================
           17. 附录
===============================================

17.1 接口清单
-----------
认证类接口：
- POST /login - 用户登录
- POST /register - 用户注册

业务类接口：
- POST /analyze-resume - 简历分析
- POST /api/interview/create - 创建面试
- POST /api/interview/start - 开始面试
- GET /api/interview/question - 获取问题
- POST /api/interview/question - 提交答案
- GET /interview/summary/{sessionId} - 获取总结

管理类接口：
- GET /admin/users - 用户管理
- GET /admin/stats - 数据统计

系统类接口：
- GET /health - 健康检查

17.2 错误码对照表
-----------------
| 错误码 | 说明 | 处理建议 |
|--------|------|----------|
| AUTH_001 | Token无效 | 重新登录 |
| AUTH_002 | 权限不足 | 检查用户角色 |
| FILE_001 | 文件格式错误 | 检查文件类型 |
| FILE_002 | 文件过大 | 压缩文件 |
| INTERVIEW_001 | 面试会话不存在 | 重新创建面试 |
| INTERVIEW_002 | 面试已结束 | 查看面试结果 |

17.3 技术栈说明
--------------
前端技术栈：
- React 18+
- React Router 6+
- Tailwind CSS
- Axios

后端技术栈（建议）：
- Node.js + Express / Python + FastAPI / Java + Spring Boot
- JWT认证
- 文件存储服务
- 数据库（PostgreSQL/MySQL）

===============================================
           联系方式
===============================================

项目相关：
- 文档问题：请查看项目README
- 代码问题：查看源码注释
- Bug反馈：提交GitHub Issue

技术支持：
- 前端开发：参考src目录下的组件文档
- 后端开发：参考本API文档实现
- 部署运维：参考部署配置说明

项目地址：
- 前端仓库：[GitHub前端项目地址]
- 后端仓库：[GitHub后端项目地址]
- 文档更新：请提交PR更新此文档

===============================================
文档结束 - 最后更新：2024-12-19
=============================================== 